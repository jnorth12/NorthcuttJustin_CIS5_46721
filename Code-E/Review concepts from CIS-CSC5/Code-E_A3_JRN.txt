/* 
 * File:   main.cpp
 * Author: Justin Northcutt
 * Created on 07/04/2020 @ 1:51 PM
 * Purpose:  Sorting an array of characters if specified correctly
 */

//System Libraries Here
#include <iostream>//cout,cin
#include <cstring> //strlen()
#include <algorithm> // sorting
#include <cmath>
using namespace std;

//User Libraries Here
//Global Constants Only, No Global Variables
//Like PI, e, Gravity, or conversions
//Function Prototypes Here
 const int SIZE=80;//Larger than needed

int read(char arr[], int sizeIn) {
    for (int a = 0; a != sizeIn; ++a)
    {
    cin >> arr[a];
    }
}

void sort(char arr[],int sizeIn) {
    sort (arr, arr + sizeIn);
}

void print(char arr[],int sizeIn) {
    for (int n = 0; n < sizeIn; ++n)
    cout << arr[n];
    cout << endl;
}

//Program Execution Begins Here
int main(int argc, char** argv) {
    //Declare all Variables Here
    
    char arr[SIZE]; //Character array larger than needed
    int sizeIn, sizeDet = 0;//Number of characters to be read, check against length

    //Input the size of the array you are sorting
    cout<<"Read in a 1 dimensional array of characters and sort"<<endl;
    cout<<"Input the array size where size <= 20"<<endl;
    cin>>sizeIn;

    //Now read in the array of characters and determine it's size
    cout<<"Now read the Array"<<endl;
    sizeDet=read(arr, sizeIn);//Determine it's size

    //Compare the size input vs. size detected and sort if same
    //Else output different size to sort
    if (sizeDet < sizeIn)
    {
        cout << "Input size less than specified.";
        cout << endl;
        return 0;
    }
    else if (sizeDet > sizeIn)
    {
        cout << "Input size greater than specified.";
        cout << endl;
        return 0;
    }
    
    else if (sizeDet = sizeIn)
    {
        sort(arr,sizeIn); //Sort the array
        print(arr,sizeIn);//Print the array
    }
    
    //Exit
    return 0;  // Couldn't find a way to break the read function loop once values were done being inputted. I theorized that by changing the maximum number in the loop
               // I could read the numbers and break once nothing was detected, but that didn't really work. 
}